name: Run Linters and Automated Tests for PRs
on:
  pull_request:
    types: [clo
    branches:
      - main
  workflow_dispatch:
jobs:
  test:
    permissions:
      id-token: write
      contents: write
      checks: write
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - name: Get changed files
        id: changed-files
        run: |
          if ${{ github.event_name == 'pull_request' }}; then
            CHANGED_FILES="$(git diff --name-only -r HEAD^1 HEAD | xargs)"
          else
            CHANGED_FILES="$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)"
          fi
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
        shell: bash

      - name: Extract Service Names
        id: extract-service-names
        run: |
          CHANGED_DIRS="$CHANGED_FILES"
          echo "CHANGED_DIRS: $CHANGED_DIRS"

          # Initialize an empty array to store the service names
          service_names=()

          # Split the input into an array based on spaces
          IFS=' ' read -ra paths <<< "$CHANGED_DIRS"

          # Iterate through each path and check if it matches the pattern
          for path in "${paths[@]}"; do
            if [[ "$path" =~ ^tests/tests_([^/]+)/ ]]; then
              # Extract the service name from the path
              service_name="${BASH_REMATCH[1]}"

              # Remove 'test_' prefix if present
              service_name="${service_name#test_}"

              # Add the service name to the array if it's not already in there
              if [[ ! " ${service_names[*]} " =~ " $service_name " ]]; then
                service_names+=("$service_name")
              fi
            fi
          done

          # Join the extracted service names into a string
          result="$(IFS=' '; echo "${service_names[*]}")"

          # Set the service names as an environment variable for GitHub Actions
          echo "service-names=$result" >> $GITHUB_ENV
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel
      - name: Cache pipenv virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync

      - name: Configure AWS credentials
        uses: mcblair/configure-aws-profile-action@v0.1.1
        with:
          role-arn: arn:aws:iam::944486121133:role/Playout_api_role
          profile-name: eio-dev
          region: us-east-1

      - name: Clean Up Previous HTML Reports
        run: |
          rm -f /tmp/*.html

      - name: Run Test Suite
        run: |
          SERVICE_NAMES="${{ env.service-names }}"

          if [ -z "$SERVICE_NAMES" ]; then
            echo "No specific services detected in changes. Running the entire test suite..."
            pipenv run python run_test.py
          else
            echo "Services with changes: $SERVICE_NAMES"
            pipenv run python run_test.py --service $SERVICE_NAMES
          fi

      - name: Read Summary Report to Get Test Results
        if: always()
        run: |
          bash results.sh

      - name: Archive pytest-reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pytest-reports
          path: /tmp/*.html

      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**.xml"
          include_passed: true
          detailed_summary: true
