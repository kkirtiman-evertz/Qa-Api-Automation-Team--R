name: Automated API Test Runner
on:
  workflow_dispatch:
    inputs:
      region:
        description: "Select a region"
        required: true
        type: choice
        options:
          - us-east-1
          - ap-southeast-2
          - eu-west-1
          - us-west-2
      env:
        description: "Select an environment"
        required: true
        type: choice
        options:
          - dev
          - test
      service:
        description: "Select a Service to run API tests"
        required: true
        type: choice
        options:
          - all
          - channel_service
          - playlist_management
          - playlist_search_and_replace
          - scheduled_assets
      channel_id:
        description: "Please enter channel ID from playout-build-test tenant"
        required: true
        type: string

  schedule:
    - cron: "0 1 * * 2" # Schedule the workflow to run at 1:00 AM UTC on Tuesday (2 represents Tuesday)
    - cron: "0 1 * * 5" # Schedule the workflow to run at 1:00 AM UTC on Friday (5 represents Friday)
jobs:
  test:
    permissions:
      id-token: write
      contents: write
      checks: write
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Update api-tests-config.yaml
        run: |
          # Replace keys and values in api-tests-config.yaml with input values
          sed -i "s/^region: .*/region: ${{ inputs.region }}/" api-tests-config.yaml
          sed -i "s/^env: .*/env: ${{ inputs.env }}/" api-tests-config.yaml
          sed -i "s/^channelId: .*/channelId: ${{ inputs.channel_id }}/" api-tests-config.yaml

      - name: Get UTC Date and Time
        id: utc_time
        run: |
          UTC_TIME=$(TZ=UTC date +'%A, %B %dst %Y, %I:%M:%S %p UTC' | sed 's/st/ /')
          echo "::set-output name=utc_time::$UTC_TIME"

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync

      - name: Configure AWS credentials for eio-dev
        uses: mcblair/configure-aws-profile-action@v0.1.1
        with:
          role-arn: arn:aws:iam::944486121133:role/PlayoutApiAutomationRole
          profile-name: eio-dev
          region: us-east-1

      - name: Configure AWS credentials for mock-customer-access
        uses: mcblair/configure-aws-profile-action@v0.1.1
        with:
          role-arn: arn:aws:iam::670153681517:role/playout-api-mock-customer-role
          profile-name: EvertzIOMockCustomerAccess
          region: us-east-1

      - name: Clean Up Previous HTML Reports
        run: |
          rm -f /tmp/*.html

      - name: Run test suite
        run: |
          selected_service="${{ github.event.inputs.service }}"
          if [ -z "$selected_service" ]; then
            echo "No specific service is selected. Running the entire test suite..."
            pipenv run python run_test.py
          else
            echo "Running tests for selected service: $selected_service"
            pipenv run python run_test.py --service "${{ github.event.inputs.service }}"
          fi

      - name: Read Summary Report to Get Test Results
        if: always()
        run: |
          bash results.sh

      - name: Archive pytest-reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-reports
          path: /tmp/*.html

      - name: Publish Test Results
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**.xml"
          include_passed: true
          detailed_summary: true

      - name: Notify MS Teams on Failure
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.BUILD_FAILURE_API_TEST_ALERTS_WEBHOOK }}
          raw: |
            {
              "title": "Backend API Automation Tests",
              "text": "This workflow was triggered by: ${{ github.actor }} on ${{ steps.utc_time.outputs.utc_time }}",
              "sections": [
                {
                  "activityImage": "${{ github.event.sender.avatar_url }}",
                  "activityTitle": "Test Results",
                  "activitySubtitle": "&#127937; Total: ${{ env.TESTS }} | &#x2705; Passed: ${{ env.PASSED }} | &#x274C; Failed: ${{ env.FAILURES }} | &#9193; Skipped: ${{ env.SKIPPED }} | &#128165; Errors: ${{ env.ERRORS }}"
                }
              ],
              "potentialAction": [
                {
                  "@type": "OpenUri",
                  "name": "View Workflow",
                  "targets": [
                    {
                      "os": "default",
                      "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                },
                {
                  "@type": "OpenUri",
                  "name": "View Repository",
                  "targets": [
                    {
                      "os": "default",
                      "uri": "https://github.com/${{ github.repository }}"
                    }
                  ]
                }
              ],
            "themeColor": "dc3545"
            }
